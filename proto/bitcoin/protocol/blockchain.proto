syntax = "proto3";

import "interface.proto";

package libbitcoin.protocol.blockchain;


//# Startup and shutdown.
// ----------------------------------------------------------------------------

/// Start or restart the blockchain.
//! bool start();
message start_request {
}

message start_reply {
  bool result = 1;
}

/// Start the orphan pool and the transaction pool.
//! bool start_pools();
message start_pools_request {
}

message start_pools_reply {
  bool result = 1;
}

/// Optional signal work stop, speeds shutdown with multiple threads.
//! bool stop();
message stop_request {
}

message stop_reply {
  bool result = 1;
}

/// Unmaps all memory and frees the database file handles.
//! bool close();
message close_request {
}

message close_reply {
  bool result = 1;
}

//# Readers.
// ----------------------------------------------------------------------------

/// Get the set of block gaps in the chain.
//! bool get_gaps(database::block_database::heights& out_gaps) const;
message get_gaps_request {
}

message get_gaps_reply {
  bool result = 1;
  repeated uint64 out_gaps = 2;
}

/// Get a determination of whether the block hash exists in the store.
//! bool get_block_exists(const hash_digest& block_hash) const;
message get_block_exists_request {
  bytes block_hash = 1;
}

message get_block_exists_reply {
  bool result = 1;
}


/// Get the hash of the block if it exists.
//! bool get_block_hash(hash_digest& out_hash, size_t height) const;
message get_block_hash_request {
  uint64 height = 1;
}

message get_block_hash_reply {
  bool result = 1;
  bytes out_hash = 2;
}


/// Get the difficulty of the fork starting at the given height.
//! bool get_fork_difficulty(hash_number& out_difficulty,
//!     uint64_t height) const;
// message get_fork_difficulty_request {
//   uint64 height = 1;
// }
// 
// message get_fork_difficulty_reply {
//   bool result = 1;
//   bytes out_difficulty = 2;
// }

/// Get the header of the block at the given height.
//! bool get_header(chain::header& out_header, uint64_t height) const;
message get_header_request {
  uint64 height = 1;
}

message get_header_reply {
  bool result = 1;
  block_header out_header = 2;
}

/// Get the height of the block with the given hash.
//! bool get_height(size_t& out_height, const hash_digest& block_hash) const;
message get_height_request {
  bytes block_hash = 1;
}

message get_height_reply {
  bool result = 1;
  uint64 out_height = 2;
}

/// Get the bits of the block with the given height.
//! bool get_bits(uint32_t& out_bits, const size_t& height) const;
message get_bits_request {
  uint64 height = 1;
}

message get_bits_reply {
  bool result = 1;
  uint32 out_bits = 2;
}

/// Get the timestamp of the block with the given height.
//! bool get_timestamp(uint32_t& out_timestamp, const size_t& height) const;
message get_timestamp_request {
  uint64 height = 1;
}

message get_timestamp_reply {
  bool result = 1;
  uint32 out_timestamp = 2;
}

/// Get the version of the block with the given height.
//! bool get_version(uint32_t& out_version, const size_t& height) const;
message get_version_request {
  uint64 height = 1;
}

message get_version_reply {
  bool result = 1;
  uint32 out_version = 2;
}

/// Get height of latest block.
//! bool get_last_height(size_t& out_height) const;
message get_last_height_request {
}

message get_last_height_reply {
  bool result = 1;
  uint64 out_height = 2;
}

/// Get the output that is referenced by the outpoint.
//! bool get_output(chain::output& out_output, size_t& out_height,
//!     size_t& out_position, const chain::output_point& outpoint,
//!     size_t fork_height) const;
message get_output_request {
  point outpoint = 1;
  uint64 fork_height = 2;
}

message get_output_reply {
  bool result = 1;
  tx_output out_output = 2;
  uint64 out_height = 3;
  uint64 out_position = 4;
}

/// Determine if an unspent transaction exists with the given hash.
//! bool get_is_unspent_transaction(const hash_digest& hash,
//!     size_t fork_height) const;
message get_is_unspent_transaction_request {
  bytes transaction_hash = 1;
  uint64 fork_height = 2;
}

message get_is_unspent_transaction_reply {
  bool result = 1;
}

/// Get the transaction of the given hash and its block height.
//! transaction_ptr get_transaction(size_t& out_block_height,
//!     const hash_digest& hash) const;
message get_transaction_request {
  bytes transaction_hash = 1;
}

message get_transaction_reply {
  tx result = 1;
  uint64 out_block_height = 2;
}

//# Writers.
// ----------------------------------------------------------------------------



/// Set the flush lock scope (for use only with insert).
//! bool begin_insert();
message begin_insert_request {
}

message begin_insert_reply {
  bool result = 1;
}

/// Reset the flush lock scope (for use only with insert).
//! bool end_writes();
message end_writes_request {
}

message end_writes_reply {
  bool result = 1;
}

/// Insert a block to the blockchain, height is checked for existence.
//! (OLD) bool insert(block_const_ptr block, uint64_t height, bool flush);
//! (NEW) bool insert(block_const_ptr block, uint64_t height);
message insert_request {
  block block = 1;
  uint64 height = 2;
  //bool flush = 3;
}

message insert_reply {
  bool result = 1;
}

// /// Append the blocks to the top of the chain, height is validated.
// //! bool push(const block_const_ptr_list& block, uint64_t height, bool flush);
// message push_request {
//   repeated block blocks = 1;
//   uint64 height = 2;
//   bool flush = 3;
// }
// 
// message push_reply {
//   bool result = 1;
// }

/// Remove blocks from above the given hash, returning them in order.
//! bool pop(block_const_ptr_list& out_blocks, const hash_digest& fork_hash,
//!     bool flush);
message pop_request {
  bytes fork_hash = 1;
  bool flush = 2;
}

message pop_reply {
  bool result = 1;
  repeated block out_blocks = 2;
}

/// Swap incoming and outgoing blocks, height is validated.
//! bool swap(block_const_ptr_list& out_blocks,
//!     const block_const_ptr_list& in_blocks, size_t fork_height,
//!     const hash_digest& fork_hash, bool flush);
message swap_request {
  repeated block in_blocks = 1;
  uint64 fork_height = 2;
  bytes fork_hash = 3;
  bool flush = 4;
}

message swap_reply {
  bool result = 1;
  repeated block out_blocks = 2;
}

//# Queries.
// ----------------------------------------------------------------------------

/// fetch a block by height.
//! void fetch_block(uint64_t height,
//!     block_fetch_handler handler) const;
/// fetch a block by hash.
//! void fetch_block(const hash_digest& hash,
//!     block_fetch_handler handler) const;
message fetch_block_request {
  bytes hash = 1;
  uint64 height = 2;
  string handler = 3;
}

message fetch_block_handler {
  int32 error = 1;
  block block = 2;
  uint64 height = 3;
}

/// fetch block header by height.
//! void fetch_block_header(uint64_t height,
//!     block_header_fetch_handler handler) const;
/// fetch block header by hash.
//! void fetch_block_header(const hash_digest& hash,
//!     block_header_fetch_handler handler) const;
message fetch_block_header_request {
  bytes hash = 1;
  uint64 height = 2;
  string handler = 3;
}

message fetch_block_header_handler {
  int32 error = 1;
  block_header header = 2;
  uint64 height = 3;
}

/// fetch hashes of transactions for a block, by block height.
//! void fetch_merkle_block(uint64_t height,
//!     transaction_hashes_fetch_handler handler) const;
/// fetch hashes of transactions for a block, by block hash.
//! void fetch_merkle_block(const hash_digest& hash,
//!     transaction_hashes_fetch_handler handler) const;
message fetch_merkle_block_request {
  bytes hash = 1;
  uint64 height = 2;
  string handler = 3;
}

message fetch_merkle_block_handler {
  message merkle_block {
    block_header header = 1;
    uint32 total_transactions = 2;
    repeated bytes hashes = 3;
    bytes flags = 4;
  }

  int32 error = 1;
  merkle_block block = 2;
  uint64 height = 3;
}



/// fetch compact block by block hash.
//! void fetch_compact_block(const hash_digest& hash,
//!     compact_block_fetch_handler handler) const;

message fetch_compact_block_request {
  bytes hash = 1;
  string handler = 2;
}

message fetch_compact_block_handler {

  message prefilled_transaction {
    int64 index = 1;
    tx tx = 2;
  }

  message compact_block {
    block_header header = 1;
    int64 nonce = 2;
    repeated bytes short_ids = 3;                       //short_id_list
    repeated prefilled_transaction transactions = 4;   //prefilled_transaction::list
  }

  int32 error = 1;
  compact_block block = 2;
  uint64 height = 3;
}


/// fetch height of block by hash.
//! void fetch_block_height(const hash_digest& hash,
//!     block_height_fetch_handler handler) const;
message fetch_block_height_request {
  bytes hash = 1;
  string handler = 2;
}

message fetch_block_height_handler {
  int32 error = 1;
  uint64 height = 2;
}

/// fetch height of latest block.
//! void fetch_last_height(last_height_fetch_handler handler) const;
message fetch_last_height_request {
  string handler = 1;
}

message fetch_last_height_handler {
  int32 error = 1;
  uint64 height = 2;
}

/// fetch transaction by hash.
//! void fetch_transaction(const hash_digest& hash,
//!     transaction_fetch_handler handler) const;
message fetch_transaction_request {
  bytes hash = 1;
  string handler = 2;
}

message fetch_transaction_handler {
  int32 error = 1;
  tx transaction = 2;
  uint64 height = 3;
  uint64 position = 4;
}

/// fetch position and height within block of transaction by hash.
//! void fetch_transaction_position(const hash_digest& hash,
//!     transaction_index_fetch_handler handler) const;
message fetch_transaction_position_request {
  bytes hash = 1;
  string handler = 2;
}

message fetch_transaction_position_handler {
  int32 error = 1;
  uint64 position = 2;
  uint64 height = 3;
}

/// fetch the output of an outpoint (spent or otherwise).
//! void fetch_output(const chain::output_point& outpoint,
//!     output_fetch_handler handler) const;
message fetch_output_request {
  point outpoint = 1;
  string handler = 2;
}

message fetch_output_handler {
  int32 error = 1;
  tx_output output = 2;
}

/// fetch the inpoint (spender) of an outpoint.
//! void fetch_spend(const chain::output_point& outpoint,
//!     spend_fetch_handler handler) const;
message fetch_spend_request {
  point outpoint = 1;
  string handler = 2;
}

message fetch_spend_handler {
  int32 error = 1;
  point point = 2;
}

/// fetch outputs, values and spends for an address.
//! void fetch_history(const wallet::payment_address& address,
//!     uint64_t limit, uint64_t from_height,
//!     history_fetch_handler handler) const;
message fetch_history_request {
  message payment_address {
    bool valid = 1;
    uint32 version = 2;
    bytes hash = 3;
  }

  payment_address address = 1;
  uint64 limit = 2;
  uint64 from_height = 3;
  string handler = 4;
}

message fetch_history_handler {
  message history_compact {
    uint32 kind = 1;
    point point = 2;
    uint64 height = 3;
    uint64 value = 4;
  }

  int32 error = 1;
  repeated history_compact history = 2;
}

/// fetch stealth results.
//! void fetch_stealth(const binary& filter, uint64_t from_height,
//!     stealth_fetch_handler handler) const;
message fetch_stealth_request {
  uint64 filter_size = 1;
  bytes filter_blocks = 2;
  uint64 from_height = 3;
  string handler = 4;
}

message fetch_stealth_handler {
  message stealth_compact {
    bytes ephemeral_public_key_hash = 1;
    bytes public_key_hash = 2;
    bytes transaction_hash = 3;
  }

  int32 error = 1;
  repeated stealth_compact stealth = 2;
}

/// fetch a block locator relative to the current top and threshold.
//! void fetch_block_locator(const chain::block::indexes& heights,
//!     block_locator_fetch_handler handler) const;
message fetch_block_locator_request {
  repeated uint64 heights = 1;
  string handler = 2;
}

message fetch_block_locator_handler {
  message get_blocks {
    repeated bytes start_hashes = 1;
    bytes stop_hash = 2;
  }

  int32 error = 1;
  get_blocks locator = 2;
}

/// fetch the set of block hashes indicated by the block locator.
//! void fetch_locator_block_hashes(get_blocks_const_ptr locator,
//!     const hash_digest& threshold, size_t limit,
//!     inventory_fetch_handler handler) const;
message fetch_locator_block_hashes_request {
  message get_blocks {
    repeated bytes start_hashes = 1;
    bytes stop_hash = 2;
  }

  get_blocks locator = 1;
  bytes threshold = 2;
  uint64 limit = 3;
  string handler = 4;
}

message fetch_locator_block_hashes_handler {
  message inventory_vector {
    uint32 type = 1;
    bytes hash = 2;
  }

  int32 error = 1;
  repeated inventory_vector inventories = 2;
}

/// fetch the set of block headers indicated by the block locator.
//! void fetch_locator_block_headers(get_headers_const_ptr locator,
//!     const hash_digest& threshold, size_t limit,
//!     locator_block_headers_fetch_handler handler) const;
message fetch_locator_block_headers_request {
  message get_headers {
    repeated bytes start_hashes = 1;
    bytes stop_hash = 2;
  }

  get_headers locator = 1;
  bytes threshold = 2;
  uint64 limit = 3;
  string handler = 4;
}

message fetch_locator_block_headers_handler {
  int32 error = 1;
  repeated block_header headers = 2;
}



//! void block_chain::fetch_mempool(size_t count_limit, uint64_t minimum_fee, inventory_fetch_handler handler) const;
message fetch_mempool_request {
  uint64 count_limit = 1;
  uint64 minimum_fee = 2;
  string handler = 3;
}

message fetch_mempool_handler {
  message inventory_vector {
    uint32 type = 1;
    bytes hash = 2;
  }

  int32 error = 1;
  repeated inventory_vector inventories = 2;
}


//! void fetch_floaters(size_t limit,
//!    inventory_fetch_handler handler) const;
message fetch_floaters_request {
  uint64 limit = 1;
  string handler = 2;
}

message fetch_floaters_handler {
  message inventory_vector {
    uint32 type = 1;
    bytes hash = 2;
  }

  int32 error = 1;
  repeated inventory_vector inventories = 2;
}

//# Filters.
// ----------------------------------------------------------------------------

/// filter out block hashes that exist in the store.
//! void filter_blocks(get_data_ptr message,
//!     result_handler handler) const;
message filter_blocks_request {
  message inventory_vector {
    int32 type = 1;
    bytes hash = 2;
  }

  repeated inventory_vector message = 1;
  string handler = 2;
}

message filter_blocks_handler {
  int32 error = 1;
}

/// filter out transaction hashes that exist in the store.
//! void filter_transactions(get_data_ptr message,
//!     result_handler handler) const;
message filter_transactions_request {
  message inventory_vector {
    int32 type = 1;
    bytes hash = 2;
  }

  repeated inventory_vector message = 1;
  string handler = 2;
}

message filter_transactions_handler {
  int32 error = 1;
}

/// filter out block hashes that exist in the orphan pool.
//! void filter_orphans(get_data_ptr message,
//!     result_handler handler) const;
message filter_orphans_request {
  message inventory_vector {
    int32 type = 1;
    bytes hash = 2;
  }

  repeated inventory_vector message = 1;
  string handler = 2;
}

message filter_orphans_handler {
  int32 error = 1;
}

/// filter out transaction hashes that exist in the store.
//! void filter_floaters(get_data_ptr message,
//!     result_handler handler) const;
message filter_floaters_request {
  message inventory_vector {
    int32 type = 1;
    bytes hash = 2;
  }

  repeated inventory_vector message = 1;
  string handler = 2;
}

message filter_floaters_handler {
  int32 error = 1;
}

//# Subscribers.
// ----------------------------------------------------------------------------

/// Subscribe to blockchain reorganizations, get forks/height.
//! void subscribe_reorganize(reorganize_handler handler);
message subscribe_reorganize_request {
  string handler = 1;
}

message subscribe_reorganize_handler {
  message block_message {
    block actual = 1;
    uint64 originator = 2;
  }

  int32 error = 1;
  uint64 fork_point = 2;
  repeated block_message new_blocks = 3;
  repeated block_message replaced_blocks = 4;
}

/// Subscribe to memory pool additions, get tx and unconfirmed outputs.
//! void subscribe_transaction(transaction_handler handler);
message subscribe_transaction_request {
  string handler = 1;
}

message subscribe_transaction_handler {
  int32 error = 1;
  repeated uint32 indexes = 2;
  tx transaction = 3;
}

//# Organizers (pools).
// ----------------------------------------------------------------------------

/// Store a block in the orphan pool, triggers may trigger reorganization.
//! void organize(block_const_ptr block, result_handler handler);
message organize_block_request {
  block actual = 1;
  uint64 originator = 2;
  string handler = 3;
}

message organize_block_handler {
  int32 error = 1;
}

/// Store a transaction to the pool.
//! void organize(transaction_const_ptr transaction,
//!     transaction_store_handler handler);
message organize_transaction_request {
  tx transaction = 1;
  string handler = 2;
}

message organize_transaction_handler {
  int32 error = 1;
  repeated uint32 indexes = 2;
}

// ============================================================================
message request {
  oneof request_type {
    // Startup and shutdown.
    start_request start = 1000;
    start_pools_request start_pools = 1001;
    stop_request stop = 1002;
    close_request close = 1003;

    // Readers.
    get_gaps_request get_gaps = 2000;
    get_block_exists_request get_block_exists = 2001;
    //get_fork_difficulty_request get_fork_difficulty = 2002;
    get_header_request get_header = 2003;
    get_height_request get_height = 2004;
    get_bits_request get_bits = 2005;
    get_timestamp_request get_timestamp = 2006;
    get_version_request get_version = 2007;
    get_last_height_request get_last_height = 2008;
    get_output_request get_output = 2009;
    get_is_unspent_transaction_request get_is_unspent_transaction = 2010;
    get_transaction_request get_transaction = 2011;
    get_block_hash_request get_block_hash = 2012;
    

    // Writers.
    begin_insert_request begin_insert = 3000;
    end_writes_request end_writes = 3001;
    insert_request insert = 3002;
//    push_request push = 3003;
    pop_request pop = 3004;
    swap_request swap = 3005;

    // Queries.
    fetch_block_request fetch_block = 4000;
    fetch_block_header_request fetch_block_header = 4001;
    fetch_merkle_block_request fetch_merkle_block = 4002;
    fetch_block_height_request fetch_block_height = 4003;
    fetch_last_height_request fetch_last_height = 4004;
    fetch_transaction_request fetch_transaction = 4005;
    fetch_transaction_position_request fetch_transaction_position = 4006;
    fetch_output_request fetch_output = 4007;
    fetch_spend_request fetch_spend = 4008;
    fetch_history_request fetch_history = 4009;
    fetch_stealth_request fetch_stealth = 4010;
    fetch_block_locator_request fetch_block_locator = 4011;
    fetch_locator_block_hashes_request fetch_locator_block_hashes = 4012;
    fetch_locator_block_headers_request fetch_locator_block_headers = 4013;
    fetch_floaters_request fetch_floaters = 4014;
    fetch_mempool_request fetch_mempool = 4015;
    

    //# Filters.
    filter_blocks_request filter_blocks = 5000;
    filter_transactions_request filter_transactions = 5001;
    filter_orphans_request filter_orphans = 5002;
    filter_floaters_request filter_floaters = 5003;

    //# Subscribers.
    subscribe_reorganize_request subscribe_reorganize = 6000;
    subscribe_transaction_request subscribe_transaction = 6001;

    //# Organizers (pools).
    organize_block_request organize_block = 7000;
    organize_transaction_request organize_transaction = 7001;
  }
}
